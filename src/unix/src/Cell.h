/* Cell.h
Definition of class Cell.
For performance reasons (i.e., in order to avoid multiple function calls),
all members are declared public.
*/

#ifndef CELL_H
#define CELL_H

#include "Element.h"

class Element;

class Cell
{
    public:
        
        Cell();				 //constructor
        ~Cell();			 //destructor
//______________________________________________________________________________
//Data structure.

        char type;          /* 'b' = black (cell node)
				               'w' = white (transition cell node) */
				               		               
		bool rightBoundary;   /*Indicates if the cell is at the boundary's right side*/
        bool leftBoundary;    /*Indicates if the cell is at the boundary's left side*/
        bool lowerBoundary;   /*Indicates if the cell is at the boundary's lower side*/
        bool upperBoundary;   /*Indicates if the cell is at the boundary's upper side*/
        
        bool refined;
        
        bool active;        /* Indicates if the cell is active(true) or inactive (false). */
        char level;         /* Refinement level (initial level = 1). */
        int bunchNumber;    /* Bunch identifier (cells derived from same father have same bunchNumber).*/
        
        Cell *north;      /* Points to a cell or transition node above this cell. */
        Cell *south;      /* Points to a cell or transition node below this cell. */
        Cell *east;       /* Points to a cell or transition node to the right of this cell. */
        Cell *west;       /* Points to a cell or transition node to the left of this cell. */

        Cell *previous;   /* Previous cell of the grid in the Peano curve ordering. */
        Cell *next;       /* Next cell of the grid in the Peano curve ordering. */

        //Pointers that only transition nodes use:
        Cell *singleConnector;
        Cell *doubleConnector1;
        Cell *doubleConnector2;

//______________________________________________________________________________
//Peano ordering.

        int peanoNumber;   /* Indicates the position of this cell in the Peano curve. */
        
        /* Variables used to calculate the form of this piece of the Peano curve 
           when this cell is refined. */
        int peanoCoordinate;      
        int fatherPeanoCoordinate;

//______________________________________________________________________________
//Cell geometry.

        double centerX;
        double centerY;
        double faceLength;
        double halfFaceLength;

//______________________________________________________________________________
/* First element in the row of the grid discretization matrix generated by this cell.
   Remember that matrix rows are implemented as linked lists. This firstElement
   corresponds to the diagonal element of the row. */
   
        Element *firstElement;
        Element *secondElement;  //Each row is associated to up to 5 lines of the matrix
        Element *thirdElement;
        Element *fourthElement;
        Element *fifthElement;
        Element *sixthElement;
        Element *seventhElement;

//______________________________________________________________________________
//Variables used in solving Darcy equation.

		double northFlux, // Flux coming from north direction.
               southFlux, // Flux coming from south direction.
               eastFlux,  // Flux coming from east direction.
               westFlux;  // Flux coming from west direction.

		double pL;
		double pR;        //Pressure in the right side of the cell
		double pU;
		double pD;        //Pressure in the lower side of the cell
		
		double vL;		  //Velocities on each side
		double vR;
		double vU;
		double vD;
		
		
		double VL;		  //Volume flux integrals
		double VR;
		double VU;
		double VD;
		
		double c;		//Tracer concentration
		double cNew;	//Auxiliar for the calculations
		
		
		double K;		  //Permeability
		double S;		  //Equals to mu/K
		double w;		  //Well rate in the cell
		
		double M[10];     // Stores values related to the permeabilities in order to solve the system
		double m[4];
		
		double pressure;

//______________________________________________________________________________
//Variables used in solving Laplace's equation.

        double u;         /* Approximated value of solution in this cell. */
        double totalFlux; /* Net flux to this cell due to its neighbors. */

//______________________________________________________________________________
/* Variables used in solving the discretized system Ax = b through the conjugate gradient method.
   The grid discretization matrix and its resolution are directly implemented on the grid, 
   which improves performance. There is no independent linear algebra package. */

        double b;   /* In Ax = b, corresponds to the element in vector b associated to this cell. */
        double b_;
        double bThird;
        double bFourth;
        double bFifth;
        double bSixth;
        double bSeventh;

        double Ap;  /* Element of vector Ax = b associated to this cell. Also plays the role of Ap.*/
		double Ap_;
		double ApThird;
		double ApFourth;
		double ApFifth;
		double ApSixth;
        double ApSeventh;
		
		double r;    /* First element of the vector r = b - Ax associated to this cell. */
		double r_;   /* Second element of the vector r = b - Ax associated to this cell. */
		double rThird;
		double rFourth;
		double rFifth;
		double rSixth;
        double rSeventh; 
		
		double r1;    /* Vector non-orthogonal to r. Initialized as r*/
		double r1_;   
		double r1Third;
		double r1Fourth;
		double r1Fifth;
		double r1Sixth;
        double r1Seventh;
		
		
        double p;    /* Element of the search direction vector in the conjugate gradient algorithm. */
		double p_;   /* Element (of the second row) of the search direction vector in the conjugate gradient algorithm. */
		double pThird;
		double pFourth;
		double pFifth;
		double pSixth;
        double pSeventh;
		
		double s; 
        double s_;
		double sThird;
		double sFourth;
		double sFifth;
		double sSixth;
        double sSeventh;
        
		double As;
		double As_;
		double AsThird;
		double AsFourth;
		double AsFifth;
		double AsSixth;
        double AsSeventh;
		
		
        double p1;   /* p's upgrade in the conjugate gradient algorithm. */
		double p1_;  /* p's upgrade in the conjugate gradient algorithm (second row). */
		double p1Third;
		double p1Fourth;
		double p1Fifth;
		double p1Sixth;
        double p1Seventh;

//______________________________________________________________________________
//Print operator.

		void print();

};//end class Cell

#endif
